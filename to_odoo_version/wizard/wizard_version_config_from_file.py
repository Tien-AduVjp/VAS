import os
import base64
from configparser import ConfigParser
from io import StringIO

from odoo import fields, models, api


class WizardVersionConfigFromFile(models.TransientModel):
    _name = 'wizard.version.config.from.file'
    _description = "Version Config From File"

    odoo_version_id = fields.Many2one('odoo.version', string='Odoo Version', required=True, ondelete='cascade')
    odoo_config_file_bin = fields.Binary(string='Odoo Config File', required=True, attachment=True,
                                         help="Upload your Odoo Config file which is corresponding"
                                         " to this Odoo version. The config file could be generated by executing `odoo-bin -s` in"
                                         " linux terminal. The file will then be saved at ~/.odoorc in your computer.")
    filename = fields.Char(string='Odoo Config File Name')
    override_existing_value = fields.Boolean(string='Override Existing Values',
                                             help="If checked, values from uploaded config file will override the existing ones.")

    @api.model
    def _load_default_file(self, file_name):
        import inspect
        directory_path = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
        with open(os.path.join(directory_path, file_name), 'r') as f:
            f.seek(0)
            f_read = f.read().encode('utf-8')
            out = base64.b64encode(f_read)
            return out

    @api.model
    def _load_default_files(self):
        """
        To be called by post_init_hook
        """
        data = [
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v8').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo8_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v9').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo9_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v10').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo10_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v11').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo11_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v12').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo12_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v13').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo13_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v14').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo14_default_conf'),
                'override_existing_value': True
            },
            {
                'odoo_version_id': self.env.ref('to_odoo_version.odoo_v15').id,
                'odoo_config_file_bin': self._load_default_file('../data/odoo15_default_conf'),
                'override_existing_value': True
            }
        ]
        records = self.env['wizard.version.config.from.file'].create(data)
        for r in records:
            r.action_generate_config_from_file()

    def action_generate_config_from_file(self):
        self.ensure_one()
        Section = self.env['config.section']
        OdooVersionConfig = self.env['odoo.version.config']
        config = ConfigParser()
        content_str = base64.decodebytes(self.odoo_config_file_bin).decode("utf-8")
        f = StringIO(content_str)
        config.read_file(f)
        for section in config.sections():
            section_id = Section.create_if_not_exist({
                'name': section,
                })
            for key in config[section]:
                val = config[section][key]
                directive_id = OdooVersionConfig.search([
                    ('name', '=', key),
                    ('section_id', '=', section_id.id),
                    ('odoo_version_id', '=', self.odoo_version_id.id)], limit=1)
                if not directive_id:
                    directive_id = OdooVersionConfig.create({
                        'name': key,
                        'value': val,
                        'section_id': section_id.id,
                        'odoo_version_id': self.odoo_version_id.id
                        })
                else:
                    if directive_id.value != val:
                        directive_id.write({
                            'value': val,
                            })

        return True
